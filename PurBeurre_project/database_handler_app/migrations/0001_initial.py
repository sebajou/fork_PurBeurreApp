# Generated by Django 3.1.1 on 2021-01-24 19:02

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('image_profile', models.ImageField(blank=True, default='elephant.jpeg', null=True, upload_to='profile_image/')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Allergen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allergen_name', models.CharField(max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Diet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diet_name', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_name', models.CharField(max_length=200, unique=True)),
                ('category', models.CharField(max_length=200)),
                ('scora_nova_group', models.IntegerField(null=True)),
                ('nutri_score_grad', models.CharField(max_length=1, null=True)),
                ('food_url', models.TextField(null=True)),
                ('image_src', models.TextField(null=True)),
                ('nutriments_100g', models.TextField(null=True)),
                ('labels_tags', models.TextField(null=True)),
                ('allergen_list', models.ManyToManyField(to='database_handler_app.Allergen')),
            ],
        ),
        migrations.CreateModel(
            name='Favorites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('favorites_list', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('id_food_list', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='database_handler_app.foodlist')),
            ],
        ),
        migrations.AddField(
            model_name='myusers',
            name='alergy',
            field=models.ManyToManyField(to='database_handler_app.Allergen'),
        ),
        migrations.AddField(
            model_name='myusers',
            name='diet_type',
            field=models.ManyToManyField(to='database_handler_app.Diet'),
        ),
        migrations.AddField(
            model_name='myusers',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='myusers',
            name='search_food',
            field=models.ManyToManyField(to='database_handler_app.FoodList'),
        ),
        migrations.AddField(
            model_name='myusers',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
